<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://saransh-cpp.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://saransh-cpp.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-08-09T12:52:30-04:00</updated><id>https://saransh-cpp.github.io/feed.xml</id><title type="html">blank</title><subtitle>I like talking about open-source, open science, and research software! </subtitle><entry><title type="html">My experience working as a Technical Writer with FluxML - Part 2</title><link href="https://saransh-cpp.github.io/blog/2022/fluxml-tw-pt2/" rel="alternate" type="text/html" title="My experience working as a Technical Writer with FluxML - Part 2"/><published>2022-10-28T00:00:00-04:00</published><updated>2022-10-28T00:00:00-04:00</updated><id>https://saransh-cpp.github.io/blog/2022/fluxml-tw-pt2</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2022/fluxml-tw-pt2/"><![CDATA[<p align="center"> <img src="https://miro.medium.com/max/1400/0*lKBsvZlO7OvUuBhM" width="70%"/> </p> <blockquote> <p>“One thing that open-source can’t get enough of is documentation”</p> <p>— Anonymous</p> </blockquote> <p>I have finally completed my official period as a Technical Writer at <code class="language-plaintext highlighter-rouge">FluxML</code>, and I have enjoyed every second of it! This blog serves as a summary of the work done during the second half of my time at <code class="language-plaintext highlighter-rouge">FluxML</code>. You’d notice that the contributions listed in this blog would cover the entire <code class="language-plaintext highlighter-rouge">FluxML</code> ecosystem and not just <code class="language-plaintext highlighter-rouge">Flux.jl</code>. Furthermore, I will also list some additional documentation contributions made to the much larger <code class="language-plaintext highlighter-rouge">Julia</code> ecosystem during this period!</p> <p>A quick introduction to <code class="language-plaintext highlighter-rouge">FluxML</code>, quoting their documentation -</p> <blockquote> <p>Flux is a 100% pure-Julia stack and provides lightweight abstractions on top of Julia’s native GPU and AD support. It makes the easy things easy while remaining fully hackable.</p> <p>Flux is a library for machine learning geared towards high-performance production pipelines. It comes “batteries-included” with many useful tools built in, but also lets you use the full power of the Julia language where you need it.</p> </blockquote> <p>Honestly, the nature of my work at <code class="language-plaintext highlighter-rouge">FluxML</code> diverged so quickly that summarising it would be a difficult task, but I will try my best! Buckle up! Psst, you can find more about the first half of the time spent at <code class="language-plaintext highlighter-rouge">FluxML</code> <a href="http://saransh-cpp.github.io/blog/2022/fluxml-tw-pt1/">here</a>.</p> <h2 id="getting-started-section">Getting started section</h2> <p>Let’s start from where I left the last blog - the new “Getting Started” section. The good news is that <code class="language-plaintext highlighter-rouge">Flux</code> has a better structured “Getting Started” section now! The bad news is that I did not work on it, but the second good news is that it turned out better than the one I had in mind!</p> <p><code class="language-plaintext highlighter-rouge">Flux</code> had a lot of tutorials and examples, but they were scattered around and very hard to navigate through. The old “Getting Started” section, “Overview” section, and “Basics” section had valuable information for beginners, but the information was scattered among these three sections. Now, all of these sections have been combined (a huge thanks to <a href="https://github.com/mcabbott"><code class="language-plaintext highlighter-rouge">@mcabbott</code></a>) in a single “Getting Started” section in <code class="language-plaintext highlighter-rouge">Flux</code>’s docs! We still have a Getting Started page on <code class="language-plaintext highlighter-rouge">Flux</code>’s website, but it will be either migrated or scrapped very soon!</p> <p>Have a look at the new “Getting Started” section <a href="https://fluxml.ai/Flux.jl/dev/">here</a>.</p> <h2 id="tutorials-section">Tutorials section</h2> <p>The new (and different than the one I imagined) “Getting Started” prompted a discussion on revamping the existing “Tutorials” section present on <code class="language-plaintext highlighter-rouge">FluxML</code>’s website. This section is currently heavily outdated and is not updated very regularly, which often misguides or scares newcomers.</p> <p>We are planning to migrate these tutorials to <code class="language-plaintext highlighter-rouge">Flux</code>’s documentation to keep them up-to-date using doctests. The contents I initially planned for the new “Getting Started” section are now planned to go into the revamped “Tutorials” section.</p> <p>Have a look at the new “Tutorials” section <a href="https://fluxml.ai/Flux.jl/dev/models/advanced/">here</a>.</p> <h2 id="independent-docs-for-nnlibjl">Independent docs for NNlib.jl</h2> <p><code class="language-plaintext highlighter-rouge">NNlib</code> now has standalone docs! <code class="language-plaintext highlighter-rouge">NNlib</code>’s documentation used to live as an independent page under <code class="language-plaintext highlighter-rouge">Flux</code>’s documentation, which was not helpful, as <code class="language-plaintext highlighter-rouge">NNlib</code> is an independent <code class="language-plaintext highlighter-rouge">Julia</code> package. This was not convenient for both the users and the developers of <code class="language-plaintext highlighter-rouge">NNlib</code>, as one had to constantly refer to the section in <code class="language-plaintext highlighter-rouge">Flux</code>’s documentation to get <code class="language-plaintext highlighter-rouge">NNlib</code> working.</p> <p>My work here started with migrating the existing page from <code class="language-plaintext highlighter-rouge">Flux</code>’s documentation to <code class="language-plaintext highlighter-rouge">NNlib</code>, which was then iterated through helpful reviews! This page was then included in a brand new documentation infrastructure, which was merged way back, but the documentation did not appear live until a few days back. The delay in the deployment of the documentation was caused by a few minor <code class="language-plaintext highlighter-rouge">Documenter.jl</code> and <code class="language-plaintext highlighter-rouge">DOCUMENTER_KEY</code> related bugs which have been resolved.</p> <p>Have a look at <code class="language-plaintext highlighter-rouge">NNlib</code>’s updated and independent documentation <a href="https://fluxml.ai/NNlib.jl">here</a>.</p> <h2 id="revamped-docs-for-metalheadjl">Revamped docs for Metalhead.jl</h2> <p><code class="language-plaintext highlighter-rouge">Metalhead.jl</code> saw a great amount of development this summer, thanks to a GSoC project led by <a href="https://github.com/theabhirath"><code class="language-plaintext highlighter-rouge">@theabhirath</code></a> and <a href="https://github.com/darsnack"><code class="language-plaintext highlighter-rouge">@darsnack</code></a>. With all of this development, it was required to revamp the old <code class="language-plaintext highlighter-rouge">Publish.jl</code> infrastructure to a modern <code class="language-plaintext highlighter-rouge">Documenter.jl</code> infrastructure. This invited numerous discussions from FluxML maintainers, given that both the packages have their ups and downs, but in the end, everyone agreed to migrate <code class="language-plaintext highlighter-rouge">Metalhead</code>’s docs to <code class="language-plaintext highlighter-rouge">Documenter.jl</code>.</p> <p>I aimed for a 1:1 port, not adding any information and not removing any information in the porting process, and the new documentation looks beautiful!</p> <p>Have a look at <code class="language-plaintext highlighter-rouge">Metalhead</code>’s revamped documentation <a href="https://fluxml.ai/Metalhead.jl/dev/index.html">here</a>.</p> <h2 id="better-community-health">Better community health</h2> <p>I have noticed that <code class="language-plaintext highlighter-rouge">Julia</code>’s ecosystem can be a bit daunting for new contributors because of the missing “Community Health” files. Most of the repositories under <code class="language-plaintext highlighter-rouge">FluxML</code> lacked issue and PR templates, making the review and triage process harder than it should be. <code class="language-plaintext highlighter-rouge">FluxML</code> also lacked an organization-wide README, recently introduced by GitHub.</p> <p><code class="language-plaintext highlighter-rouge">FluxML</code> now has default issues and PR templates, which can be overridden by every repository! The organization-wide README is also in its place, guiding newcomers better than ever!</p> <p>Have a look at the default issue templates <a href="https://github.com/FluxML/Flux.jl/issues/new/choose">here</a>.</p> <p>Have a look at the organization-wide README <a href="https://github.com/FluxML">here</a>.</p> <p>Create a PR in a repository under <code class="language-plaintext highlighter-rouge">FluxML</code> to see the default PR template 😉</p> <h2 id="better-docs-for-onehotarraysjl">Better docs for OneHotArrays.jl</h2> <p><code class="language-plaintext highlighter-rouge">Flux.jl</code> maintainers recently decided to move the “One Hot Encoding” functionalities of <code class="language-plaintext highlighter-rouge">Flux</code> into a separate independent package. As you might have guessed, this called for some documentation audits!</p> <p>I have updated and added the docstrings of the <code class="language-plaintext highlighter-rouge">OneHot*</code> structs to <code class="language-plaintext highlighter-rouge">OneHotArray</code>’s manual, making them accessible to the users. I also debugged and helped to build the missing <code class="language-plaintext highlighter-rouge">v0.1.0</code> documentation of <code class="language-plaintext highlighter-rouge">OneHotArrays.jl</code>!</p> <p>Have a look at <code class="language-plaintext highlighter-rouge">OneHotArray</code>’s <code class="language-plaintext highlighter-rouge">v0.1.0</code> documentation <a href="https://fluxml.ai/OneHotArrays.jl">here</a>.</p> <h2 id="migrating-fluxmls-website-to-franklinjl">Migrating FluxML’s website to Franklin.jl</h2> <p><code class="language-plaintext highlighter-rouge">Franklin.jl</code> is a modern static site generator written in <code class="language-plaintext highlighter-rouge">Julia</code>! Quoting their documentation -</p> <blockquote> <p>Franklin is a simple, customisable static site generator oriented towards technical blogging and light, fast-loading pages.</p> </blockquote> <p><code class="language-plaintext highlighter-rouge">FluxML</code> maintainers decided to port the existing <code class="language-plaintext highlighter-rouge">FluxML</code> website (built using <code class="language-plaintext highlighter-rouge">Jekyll</code>) to <code class="language-plaintext highlighter-rouge">Franklin</code>, and this was primarily carried out by <a href="https://github.com/logankilpatrick"><code class="language-plaintext highlighter-rouge">@logankilpatrick</code></a> and <a href="https://github.com/darsnack"><code class="language-plaintext highlighter-rouge">@darsnack</code></a>. Where do I come in? I helped set up the infrastructure of the new site! I primarily worked on enabling PR previews using GitHub Actions, something not documented in <code class="language-plaintext highlighter-rouge">Franklin</code>’s documentation (and has not been done before). I also fixed some minor bugs revolving around relative paths and production deployment!</p> <p>Have a look at the migrated website <a href="https://fluxml.ai">here</a>.</p> <h2 id="adding-a-new-section-to-franklinjls-docs-">Adding a new section to Franklin.jl’s docs 😉</h2> <p>Referring to the section above, I decided to update <code class="language-plaintext highlighter-rouge">Franklin.jl</code>’s documentation to include a section on deploying PR previews using GitHub Actions. This eliminated the need for extra infrastructure and also lead to restructuring the original “deploy” documentation of <code class="language-plaintext highlighter-rouge">Franklin</code>. The revamped “deploy” documentation provides much more options to a user and is easier to navigate through.</p> <p>I also took the liberty to update outdated documentation of <code class="language-plaintext highlighter-rouge">Franklin</code>, including outdated GitHub Actions and variable definitions!</p> <p>Have a look at the revamped deployment page <a href="https://franklinjl.org/workflow/deploy/">here</a>.</p> <h2 id="misc">Misc</h2> <p>I cannot possibly think of writing this section without missing out on something. I worked extensively on miscellaneous issues, not limited only to <code class="language-plaintext highlighter-rouge">Flux.jl</code>, but also related to <code class="language-plaintext highlighter-rouge">FluxML</code> as a whole. These miscellaneous issues ranged from refining existing <code class="language-plaintext highlighter-rouge">FluxML</code>’s logos to developing and fixing CI/CD pipelines of <code class="language-plaintext highlighter-rouge">FluxML</code> packages.</p> <p>Additionally, while working with <code class="language-plaintext highlighter-rouge">Franklin.jl</code>, I discovered that <code class="language-plaintext highlighter-rouge">Julia</code>’s website is open-source and written in <code class="language-plaintext highlighter-rouge">Franklin</code>! I took this opportunity to update some outdated Actions and syntax on the website. Currently, I am also looking at migrating Julia’s website to the new GitHub Pages infrastructure, or the new PR preview infrastructure (mentioned in the section above).</p> <p>Refer to my GitHub for all the “misc” work carried out by me during the past six months 🙂</p> <h2 id="minor-code-contributions-">Minor code contributions 😉</h2> <p>Surprisingly, I also contributed to <code class="language-plaintext highlighter-rouge">Flux</code>’s code. The code contributions weren’t in the form of feature additions, instead, I worked on minor bugs and refined the public API.</p> <p>For instance, I deprecated <code class="language-plaintext highlighter-rouge">rng_from_array()</code> in the favor of <code class="language-plaintext highlighter-rouge">default_rng_value()</code>, and then marked it as <code class="language-plaintext highlighter-rouge">@non_differentiable</code>. These contributions weren’t too big, but adding code to <code class="language-plaintext highlighter-rouge">Flux</code>’s repository did feel good. I look forward to writing more code for <code class="language-plaintext highlighter-rouge">FluxML</code> in the future!</p> <h2 id="final-words">Final words</h2> <p>I will be forever grateful to the whole FluxML community for giving me such a wonderful time! I do feel like I have accomplished a bit in the last 6 months, and the documentation of FluxML is at a better place than the point when I started.</p> <p>A special thanks to <a href="https://github.com/DhairyaLGandhi"><code class="language-plaintext highlighter-rouge">@DhairyaLGandhi</code></a>, <a href="https://github.com/ToucheSir"><code class="language-plaintext highlighter-rouge">@ToucheSir</code></a>, <a href="https://github.com/mcabbott"><code class="language-plaintext highlighter-rouge">@mcabbott</code></a>, and <a href="https://github.com/darsnack"><code class="language-plaintext highlighter-rouge">@darsnack</code></a> for bearing with me through my untidy PRs and helping me out as always!</p> <p>Oh, I also joined FluxML’s GitHub organisation a few weeks back! 🥳</p> <h2 id="tweets">Tweets</h2> <p>Follow me on Twitter :)</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Oh also, I joined <a href="https://twitter.com/FluxML?ref_src=twsrc%5Etfw">@FluxML</a>&#39;s GitHub org a few weeks back :)<br/><br/>Feels like an achievement</p>&mdash; Saransh Chopra (@saranshchopra7) <a href="https://twitter.com/saranshchopra7/status/1581569050555330560?ref_src=twsrc%5Etfw">October 16, 2022</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <hr/> <h2 id="appendix">Appendix</h2> <h3 id="prs-and-issues">PRs and issues</h3> <p>Either I created these PRs/issues, or I had some significant involvement in them 😄</p> <h4 id="fluxjl">Flux.jl</h4> <ul> <li><a href="https://github.com/FluxML/Flux.jl/pull/2035">Fix the last remaining 404 errors</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2046">Better docs for reexported packages</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2055">Leftover changes from #2046</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2063">Add a dark mode version of logo</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2064">Fix a few crossrefs + update Zygote’s page</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2065">Make rng_from_array non differentiable</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2081">Back to create_bias</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2074">Add GH action format check files with JuliaFormatter</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/2086">@autosize does not work with semi-colon separated kwargs</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/2038">Discussion: documentation for @reexported and imported (or using) packages</a></li> </ul> <h4 id="metalheadjl">Metalhead.jl</h4> <ul> <li><a href="https://github.com/FluxML/Metalhead.jl/pull/199">Migrate docs to Documenter.jl</a></li> </ul> <h4 id="nnlibjl">NNlib.jl</h4> <ul> <li><a href="https://github.com/FluxML/NNlib.jl/pull/431">Add minimal infrastructure for the docs</a></li> <li><a href="https://github.com/FluxML/NNlib.jl/pull/438">Create root level index.html</a></li> <li><a href="https://github.com/FluxML/NNlib.jl/pull/440">Trigger tagbot on issue comments</a></li> <li><a href="https://github.com/FluxML/NNlib.jl/issues/430">Create independent documentation for NNlib.jl?</a></li> </ul> <h4 id="onehotarraysjl">OneHotArrays.jl</h4> <ul> <li><a href="https://github.com/FluxML/OneHotArrays.jl/pull/18">minor doc additions and fixes</a></li> <li><a href="https://github.com/FluxML/OneHotArrays.jl/issues/19">Missing v0.1.0 docs + add docs URL in About section</a></li> </ul> <h4 id="fluxmlgithubio">fluxml.github.io</h4> <ul> <li><a href="https://github.com/FluxML/fluxml.github.io/pull/146">Use the latest API of MLDatasets.MNIST</a></li> <li><a href="https://github.com/FluxML/fluxml.github.io/pull/154">Use relative folder paths instead of root paths to fix previews</a></li> <li><a href="https://github.com/FluxML/fluxml.github.io/pull/145">Port website to Franklin.jl</a></li> <li><a href="https://github.com/FluxML/fluxml.github.io/issues/141">Discussion: Update and periodically test posts and model-zoo tutorials</a></li> </ul> <h4 id="franklinjl">Franklin.jl</h4> <ul> <li><a href="https://github.com/tlienart/Franklin.jl/pull/982">New section on previews using GH Actions + update outdated deployment workflows</a></li> <li><a href="https://github.com/tlienart/Franklin.jl/issues/980">Rendering and deploying previews using GitHub</a></li> <li><a href="https://github.com/tlienart/Franklin.jl/pull/981">Indent YAML block</a></li> </ul> <h4 id="wwwjulialangorg">www.julialang.org</h4> <ul> <li><a href="https://github.com/JuliaLang/www.julialang.org/pull/1760">Update outdated Actions and syntax for variable definition</a></li> <li><a href="https://github.com/JuliaLang/www.julialang.org/issues/1719">Use the new github pages deployment workflow</a></li> </ul> <h4 id="github">.github</h4> <ul> <li><a href="https://github.com/FluxML/.github/pull/3">Add PR template, README, and contact links</a></li> <li><a href="https://github.com/FluxML/.github/issues/2">Discussion: Flesh out FluxML/.github repository</a></li> </ul>]]></content><author><name></name></author><category term="experience"/><category term="fluxml"/><category term="julia"/><category term="machine-learning"/><category term="technical-writing"/><summary type="html"><![CDATA[One thing that open-source can’t get enough of is documentation!]]></summary></entry><entry><title type="html">Linear regression in Julia (from scratch and with FluxML)</title><link href="https://saransh-cpp.github.io/blog/2022/linear-regression-copy/" rel="alternate" type="text/html" title="Linear regression in Julia (from scratch and with FluxML)"/><published>2022-08-21T00:00:00-04:00</published><updated>2022-08-21T00:00:00-04:00</updated><id>https://saransh-cpp.github.io/blog/2022/linear-regression%20copy</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2022/linear-regression-copy/"><![CDATA[]]></content><author><name></name></author><category term="tutorial"/><category term="machine-learning"/><category term="julia"/><category term="fluxml"/><summary type="html"><![CDATA[Constructing a linear regression model from scratch and then with Flux.jl in pure Julia.]]></summary></entry><entry><title type="html">My experience working as a Technical Writer with FluxML - Part 1</title><link href="https://saransh-cpp.github.io/blog/2022/fluxml-tw-pt1/" rel="alternate" type="text/html" title="My experience working as a Technical Writer with FluxML - Part 1"/><published>2022-07-27T00:00:00-04:00</published><updated>2022-07-27T00:00:00-04:00</updated><id>https://saransh-cpp.github.io/blog/2022/fluxml-tw-pt1</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2022/fluxml-tw-pt1/"><![CDATA[<p align="center"> <img src="https://miro.medium.com/max/1400/0*lKBsvZlO7OvUuBhM" width="70%"/> </p> <blockquote> <p>“One thing that open-source can’t get enough of is documentation”</p> <p>— Anonymous</p> </blockquote> <p>This summer, I started working as a technical writer with <code class="language-plaintext highlighter-rouge">FluxML</code> under <code class="language-plaintext highlighter-rouge">Julia Season of Contributions</code>, and as expected, this experience was very different from writing code.</p> <p>During the beginning of the summer, I decided to take up a technical writer’s job that involved writing documentation and tutorials for Machine Learning. At the same time, I was learning <code class="language-plaintext highlighter-rouge">Julia</code>, and the <code class="language-plaintext highlighter-rouge">FluxML</code> ecosystem sounded like a perfect place for me. I applied for the position through Google Season of Docs but unfortunately couldn’t get in because of limited openings. Fortunately, the <code class="language-plaintext highlighter-rouge">Julia</code> Language decided to fund me for the next few months to work on <code class="language-plaintext highlighter-rouge">FluxML</code> under Julia Season of Contributions!</p> <p>In the following blog, I will share my experience and the work I have done so far as a part of Julia Season of Contributions!</p> <p align="center"> <img src="https://miro.medium.com/max/1034/0*q6JXOCVKV1iFaSdF.jpg" width="60%"/> </p> <h2 id="doctests">Doctests</h2> <p align="center"> <img src="https://miro.medium.com/max/1400/0*8GSRfjMTA_bTMlYF.jpg" width="60%"/> </p> <p><code class="language-plaintext highlighter-rouge">Flux</code>’s documentation lacked doctests, making its code examples stale after each release. Further, many current examples thought to be covered by doctests, were already outdated.</p> <p>Some of the doctests were straightforward to add, but most of them require in-depth discussions with the mentors and the community members. In addition, the documentation written in markdown format also required periodic testing to ensure that the changing API does not break the examples.</p> <p><code class="language-plaintext highlighter-rouge">Flux</code> now has doctests written for every single public API, and most of the markdown example are also covered under these doctests. Some of these changes haven’t been merged yet, but they are under review!</p> <h2 id="missing-docstrings">Missing docstrings</h2> <p align="center"> <img src="https://miro.medium.com/max/1006/0*8kn0CXy4r7I1OXw6.jpg" width="50%"/> </p> <p>Some of <code class="language-plaintext highlighter-rouge">Flux</code>’s public API was undocumented, or had a relatively less clear documentation. For example, most of the neural network layers provided by <code class="language-plaintext highlighter-rouge">Flux</code> have two constructors — one for initializing layers with pre-defined weights and biases and another for generating weights and biases from a distribution. In most cases, only one constructor was documented, and the other was not.</p> <p>Other such instance of missing docstrings was <code class="language-plaintext highlighter-rouge">Flux</code>‘s manual. Here the docstrings were present in the codebase, but they were not present in the manual. Such cases were solved by adding the docstrings to the manual or creating a new section for such missing docstrings.</p> <p>In addition to <code class="language-plaintext highlighter-rouge">Flux</code>, other packages under FluxML also had a similar problem. Some of these packages like <code class="language-plaintext highlighter-rouge">NNLib.jl</code>, <code class="language-plaintext highlighter-rouge">Zygote.jl</code>, <code class="language-plaintext highlighter-rouge">Optimisers.jl</code>, <code class="language-plaintext highlighter-rouge">Functors.jl</code>, and <code class="language-plaintext highlighter-rouge">MLUtils.jl</code> (under <code class="language-plaintext highlighter-rouge">JuliaML</code>) were also referenced in <code class="language-plaintext highlighter-rouge">Flux</code>‘s documentation. The missing docstrings in these packages were transmitted to <code class="language-plaintext highlighter-rouge">Flux</code>‘s docs, resulting in even more missing docstrings.</p> <p>All the missing docstrings have now been added to the respective manuals and functions, including that of other <code class="language-plaintext highlighter-rouge">FluxML</code> packages!</p> <h2 id="broken-documentation">Broken documentation</h2> <p align="center"> <img src="https://miro.medium.com/max/1000/0*MarZNCzdnOb8c2vy.jpg" width="50%"/> </p> <p>Documentation is incomplete without cross-references, and <code class="language-plaintext highlighter-rouge">Julia</code>’s wonderful documentation package makes this super smooth. <code class="language-plaintext highlighter-rouge">Flux</code> had these cross-references in place, but some of them lead to nowhere.</p> <p>Additionally, some of the docstrings were not rendered correctly in the manual, making the newcomers stray off from the ecosystem. These instances of broken documentation have been fixed, and once the PR is merged, users should not see 404 pages or un-rendered docstrings anymore!</p> <h2 id="cicd">CI/CD</h2> <p align="center"> <img src="https://miro.medium.com/max/1400/0*k6C11T4CR0B75GMy.jpg" width="50%"/> </p> <p>The user-facing documentation of <code class="language-plaintext highlighter-rouge">Flux</code> is facilitated by a CI/CD service, which keeps this documentation deployed and available to users at all times. It is common for open-source projects to open-source their deployment recipes and work on it collaboratively.</p> <p><code class="language-plaintext highlighter-rouge">FluxML</code>‘s ecosystem had some minor issues in this CI service. For instance - <code class="language-plaintext highlighter-rouge">Zygote.jl</code> had doctests running twice, using twice the CI time and resources. On the other hand, <code class="language-plaintext highlighter-rouge">Flux</code> specified different versions of Julia in its CI and <code class="language-plaintext highlighter-rouge">make.jl</code> file, making the CI environment very ambiguous.</p> <p>Further, <code class="language-plaintext highlighter-rouge">Documenter.jl</code> allows a user to generate documentation previews for pull requests, and <code class="language-plaintext highlighter-rouge">Flux</code> had a bot set up to facilitate this, but it was down for a long time. These documentation previews are collected in the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch, which was getting very bulky and had to be cleaned up with an automated workflow.</p> <p>I have restarted this bot and have added a workflow for cleaning these generated previews periodically! I have also fixed some issues in <code class="language-plaintext highlighter-rouge">Optimisers.jl</code>‘s documentation that were causing its CI to fail.</p> <h2 id="fluxmls-ecosystem">FluxML’s ecosystem</h2> <p>The <code class="language-plaintext highlighter-rouge">FluxML</code> ecosystem, in addition to <code class="language-plaintext highlighter-rouge">Flux.jl</code>, also had some documentation problems. For instance, <code class="language-plaintext highlighter-rouge">Optimisers.jl</code> and <code class="language-plaintext highlighter-rouge">Zygote.jl</code> had shortcomings in their CI suite, which have been discussed above. Similarly, <code class="language-plaintext highlighter-rouge">Functors.jl</code> and <code class="language-plaintext highlighter-rouge">MLUtils.jl</code> had broken documentation, missing docstrings, and an incomplete manual, which has also been discussed in great detail above!</p> <p>Lastly, the “ecosystem” pages present on <code class="language-plaintext highlighter-rouge">Flux</code>‘s website and documentation were out of sync and had redundant information. The “ecosystem” page was completely revamped and updated with the latest advancements related to Machine Learning in <code class="language-plaintext highlighter-rouge">Julia</code>!</p> <h2 id="minor-code-changes">Minor code changes</h2> <p>Yes! The documentation changes were also accompanied by minor code changes!</p> <p><code class="language-plaintext highlighter-rouge">Flux</code>‘s public and internal API is very hard to differentiate if you are new to the codebase; hence, newcomers used to find it hard to navigate through this. The API was made clear by removing internal instances from the documentation and prepending an underscore to the internal API.</p> <p>Furthermore, I also stumbled upon a bug while writing doctests for tversky loss. The tversky loss has two parameters, <code class="language-plaintext highlighter-rouge">α</code>, and <code class="language-plaintext highlighter-rouge">β</code>, and <code class="language-plaintext highlighter-rouge">Flux</code> internally calculates the value of <code class="language-plaintext highlighter-rouge">α</code> as <code class="language-plaintext highlighter-rouge">1-β</code>. The loss mathematically is defined as <code class="language-plaintext highlighter-rouge">1-tversky index</code>, and the <code class="language-plaintext highlighter-rouge">tversky index</code> mathematically is defined as:</p> <blockquote> <table> <tbody> <tr> <td>S(P, G; α, β) =</td> <td>P G</td> <td>/ (</td> <td>P G</td> <td>+ α</td> <td>P \ G</td> <td>+ β</td> <td>G \ P</td> <td>)</td> </tr> </tbody> </table> <p>where α and β control the magnitude of penalties for FPs and FNs, respectively.</p> </blockquote> <p>Flux implements the loss in the following way -</p> <figure class="highlight"><pre><code class="language-julia" data-lang="julia"><span class="mi">1</span> <span class="n">—</span> <span class="n">sum</span><span class="x">(</span><span class="o">|</span><span class="n">y</span> <span class="o">.*</span> <span class="n">ŷ</span><span class="o">|</span> <span class="o">+</span> <span class="mi">1</span><span class="x">)</span> <span class="o">/</span> <span class="x">(</span><span class="n">sum</span><span class="x">(</span><span class="n">y</span> <span class="o">.*</span> <span class="n">ŷ</span> <span class="o">+</span> <span class="n">β</span><span class="o">*</span><span class="x">(</span><span class="mi">1</span> <span class="o">.-</span> <span class="n">y</span><span class="x">)</span> <span class="o">.*</span> <span class="n">ŷ</span> <span class="o">+</span> <span class="x">(</span><span class="mi">1</span> <span class="n">—</span> <span class="n">β</span><span class="x">)</span><span class="o">*</span><span class="n">y</span> <span class="o">.*</span> <span class="x">(</span><span class="mi">1</span> <span class="o">.-</span> <span class="n">ŷ</span><span class="x">))</span> <span class="o">+</span> <span class="mi">1</span><span class="x">)</span></code></pre></figure> <p>with the following code -</p> <figure class="highlight"><pre><code class="language-julia" data-lang="julia"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre> <span class="s">"""
     tversky_loss(ŷ, y; β = 0.7)

 Return the [Tversky loss](https://arxiv.org/abs/1706.05721).
 Used with imbalanced data to give more weight to false negatives.
 Larger β weigh recall more than precision (by placing more emphasis on false negatives)
 Calculated as:
     1 - sum(|y .* ŷ| + 1) / (sum(y .* ŷ + β*(1 .- y) .* ŷ + (1 - β)*y .* (1 .- ŷ)) + 1)
 """</span>
 <span class="k">function</span><span class="nf"> tversky_loss</span><span class="x">(</span><span class="n">ŷ</span><span class="x">,</span> <span class="n">y</span><span class="x">;</span> <span class="n">β</span> <span class="o">=</span> <span class="n">ofeltype</span><span class="x">(</span><span class="n">ŷ</span><span class="x">,</span> <span class="mf">0.7</span><span class="x">))</span>
     <span class="n">_check_sizes</span><span class="x">(</span><span class="n">ŷ</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span>
     <span class="c">#TODO add agg</span>
     <span class="n">num</span> <span class="o">=</span> <span class="n">sum</span><span class="x">(</span><span class="n">y</span> <span class="o">.*</span> <span class="n">ŷ</span><span class="x">)</span> <span class="o">+</span> <span class="mi">1</span>
     <span class="n">den</span> <span class="o">=</span> <span class="n">sum</span><span class="x">(</span><span class="n">y</span> <span class="o">.*</span> <span class="n">ŷ</span> <span class="o">+</span> <span class="n">β</span> <span class="o">*</span> <span class="x">(</span><span class="mi">1</span> <span class="o">.-</span> <span class="n">y</span><span class="x">)</span> <span class="o">.*</span> <span class="n">ŷ</span> <span class="o">+</span> <span class="x">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">β</span><span class="x">)</span> <span class="o">*</span> <span class="n">y</span> <span class="o">.*</span> <span class="x">(</span><span class="mi">1</span> <span class="o">.-</span> <span class="n">ŷ</span><span class="x">))</span> <span class="o">+</span> <span class="mi">1</span>
     <span class="mi">1</span> <span class="o">-</span> <span class="n">num</span> <span class="o">/</span> <span class="n">den</span>
 <span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Notice how the term <code class="language-plaintext highlighter-rouge">(1 .- y) .* ŷ</code> (False Positives) is multiplied by <code class="language-plaintext highlighter-rouge">β</code>, whereas it should be multiplied with <code class="language-plaintext highlighter-rouge">α</code> (which is <code class="language-plaintext highlighter-rouge">1-β</code>). Similarly, the term <code class="language-plaintext highlighter-rouge">y .* (1 .- ŷ)</code> is multiplied with <code class="language-plaintext highlighter-rouge">α</code> (that is <code class="language-plaintext highlighter-rouge">1-β</code>), whereas it should be multiplied with <code class="language-plaintext highlighter-rouge">β</code>.</p> <p>This detail makes the loss function behave in a manner opposite to its documentation. For example -</p> <figure class="highlight"><pre><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="x">[</span><span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">];</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">ŷ_fp</span> <span class="o">=</span> <span class="x">[</span><span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">];</span> <span class="c"># 2 false positive -&gt; 2 wrong predictions</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">ŷ_fnp</span> <span class="o">=</span> <span class="x">[</span><span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">];</span> <span class="c"># 1 false negative, 1 false positive -&gt; 2 wrong predictions</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Flux</span><span class="o">.</span><span class="n">tversky_loss</span><span class="x">(</span><span class="n">ŷ_fnp</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span>
<span class="mf">0.19999999999999996</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Flux</span><span class="o">.</span><span class="n">tversky_loss</span><span class="x">(</span><span class="n">ŷ_fp</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span> <span class="c"># should be smaller than tversky_loss(ŷ_fnp, y), as FN is given more weight</span>
<span class="mf">0.21875</span></code></pre></figure> <p>Here the loss for <code class="language-plaintext highlighter-rouge">ŷ_fnp</code>, <code class="language-plaintext highlighter-rouge">y</code> should have been larger than the loss for <code class="language-plaintext highlighter-rouge">ŷ_fp</code>, <code class="language-plaintext highlighter-rouge">y</code> as the loss should give more weight or penalize the False Negatives (default <code class="language-plaintext highlighter-rouge">β</code> is <code class="language-plaintext highlighter-rouge">0.7</code>; hence it should give more weight to FN), but the exact opposite happens.</p> <p>Changing the implementation of the loss yields the following results -</p> <figure class="highlight"><pre><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="x">[</span><span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">];</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">ŷ_fp</span> <span class="o">=</span> <span class="x">[</span><span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">];</span> <span class="c"># 2 false positive -&gt; 2 wrong predictions</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">ŷ_fnp</span> <span class="o">=</span> <span class="x">[</span><span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">];</span> <span class="c"># 1 false negative, 1 false positive -&gt; 2 wrong predictions</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Flux</span><span class="o">.</span><span class="n">tversky_loss</span><span class="x">(</span><span class="n">ŷ_fnp</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span>
<span class="mf">0.19999999999999996</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Flux</span><span class="o">.</span><span class="n">tversky_loss</span><span class="x">(</span><span class="n">ŷ_fp</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span> <span class="c"># should be smaller than tversky_loss(ŷ_fnp, y), as FN is given more weight</span>
<span class="mf">0.1071428571428571</span></code></pre></figure> <p>which looks right!</p> <p>(This bug has not been confirmed by someone other than me yet, and the fix is still under review.)</p> <h2 id="getting-started-section">Getting started section</h2> <p><code class="language-plaintext highlighter-rouge">Flux</code> has a lot of tutorials and examples, but they are scattered around and are very hard to navigate through. The current “Getting Started” section, “Overview” section, and “Basics” section have valuable information for beginners, but the information is scattered among these three sections.</p> <p>Additionally, one of these three sections is on Flux’s website, and two are available on the documentation website, making it difficult for newcomers to navigate between these hackable yet basic examples. Instead, these three tutorials could be moved out of their current places and combined under a single section named “Getting Started”, which could then be added to the documentation and linked on the website.</p> <p>I have started working on this section, and two extensive tutorials have already been added as PRs: one on linear regression (with and without <code class="language-plaintext highlighter-rouge">Flux</code>) and one on logistic regression (with and without <code class="language-plaintext highlighter-rouge">Flux</code>). These PRs are currently under review and should be merged in the upcoming weeks.</p> <hr/> <p>I have had an incredible time contributing to <code class="language-plaintext highlighter-rouge">Flux</code> and its neighbor repositories, and I hope to continue these contributions with the same momentum. I have also learned a lot, including that documentation additions require more discussions than code additions.</p> <p>This work wouldn’t have been possible without my mentor <a href="https://github.com/DhairyaLGandhi"><code class="language-plaintext highlighter-rouge">@DhairyaLGandhi</code></a> and a lot of other <code class="language-plaintext highlighter-rouge">FluxML</code>’s maintainers (<a href="https://github.com/ToucheSir"><code class="language-plaintext highlighter-rouge">@ToucheSir</code></a>, <a href="https://github.com/mcabbott"><code class="language-plaintext highlighter-rouge">@mcabbott</code></a>, <a href="https://github.com/CarloLucibello"><code class="language-plaintext highlighter-rouge">@CarloLucibello</code></a>, <a href="https://github.com/darsnack"><code class="language-plaintext highlighter-rouge">@darsnack</code></a>). They have been very patient with my questions and messy PRs 😆</p> <hr/> <h2 id="tweets">Tweets</h2> <p>Follow me on Twitter :)</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">May was a tough month for me, but it&#39;s finally over!<br/><br/>A life update: I&#39;ll be working as a technical writer this summer to improve <a href="https://twitter.com/FluxML?ref_src=twsrc%5Etfw">@FluxML</a>&#39;s documentation. Feel free to open a documentation-related issue if you think something in Flux&#39;s documentation needs improvement! :) <a href="https://t.co/C57FtnAWXh">pic.twitter.com/C57FtnAWXh</a></p>&mdash; Saransh Chopra (@saranshchopra7) <a href="https://twitter.com/saranshchopra7/status/1532365616610672640?ref_src=twsrc%5Etfw">June 2, 2022</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <hr/> <h2 id="appendix">Appendix</h2> <h3 id="pull-requests">Pull requests</h3> <h5 id="fluxjl">Flux.jl</h5> <ul> <li><a href="https://github.com/FluxML/Flux.jl/pull/1916">Add a ton of doctests + fix outdated documentation in .md files</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1978">Update docstrings of basic.jl and conv.jl</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1995">Update docstrings in upsample.jl, recurrent.jl, and normalise.jl</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1998">Miscellaneous docstring additions and fixes</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1910">Add MLUtils’s docs and fix some missing docstrings</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1915">Turn off doctests while building docs</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1923">Unify ecosystem.md</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1937">Get the DocBot up again!</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1943">Add a workflow to delete PR previews</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/1987">Get rid of documentation warnings and 404 pages</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2016">Create a getting started section and add a new linear regression example</a></li> <li><a href="https://github.com/FluxML/Flux.jl/pull/2021">Add a logistic regression example to the Getting Started section</a></li> </ul> <h4 id="zygotejl">Zygote.jl</h4> <ul> <li><a href="https://github.com/FluxML/Zygote.jl/pull/1255">Run doctests only once</a></li> </ul> <h4 id="optimisersjl">Optimisers.jl</h4> <ul> <li><a href="https://github.com/FluxML/Optimisers.jl/pull/98">Fix the doctests and the broken CI</a></li> </ul> <h4 id="functorsjl">Functors.jl</h4> <ul> <li><a href="https://github.com/FluxML/Functors.jl/pull/42">Fix missing docs and cross-references</a></li> </ul> <h4 id="mlutilsjl">MLUtils.jl</h4> <ul> <li><a href="https://github.com/JuliaML/MLUtils.jl/pull/95">Add missing docstrings to the manual</a></li> </ul> <h3 id="issues--discussions">Issues / discussions</h3> <h4 id="fluxjl-1">Flux.jl</h4> <ul> <li><a href="https://github.com/FluxML/Flux.jl/issues/1909">Missing docstring for Flux.Data.Dataloader</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/1914">Different Julia versions at different places for doctests</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/1922">Inconsistent “Julia ecosystem” docs</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/1940">Add a workflow to clean-up gh-pages branch?</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/1990">Discussion: doctests, docstrings, documentation manual, and unclear internal API (for newcomers)</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/1993">Bug: Swapped alpha and beta in tversky loss?</a></li> <li><a href="https://github.com/FluxML/Flux.jl/issues/2012">Discussion: Revamped Getting Started guide</a></li> </ul> <h4 id="zygotejl-1">Zygote.jl</h4> <ul> <li><a href="https://github.com/FluxML/Zygote.jl/issues/1199">Doctests running twice</a></li> </ul> <hr/> <h2 id="bonus">Bonus</h2> <p align="center"> <img src="https://miro.medium.com/max/1344/0*2SLqKWtR_dGZwRAm.jpg" width="60%"/> </p> <hr/> <div class="caption"> (Same post, but on <a href="https://blog.devgenius.io/my-experience-working-as-a-technical-writer-with-fluxml-2c19ab814089">medium</a> (I am migrating my blogs from medium to my website)) </div>]]></content><author><name></name></author><category term="experience"/><category term="fluxml"/><category term="julia"/><category term="machine-learning"/><category term="technical-writing"/><summary type="html"><![CDATA[One thing that open-source can’t get enough of is documentation!]]></summary></entry><entry><title type="html">“execvp” system call in Python - Everything you need to know!</title><link href="https://saransh-cpp.github.io/blog/2022/execvp/" rel="alternate" type="text/html" title="“execvp” system call in Python - Everything you need to know!"/><published>2022-03-06T00:00:00-05:00</published><updated>2022-03-06T00:00:00-05:00</updated><id>https://saransh-cpp.github.io/blog/2022/execvp</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2022/execvp/"><![CDATA[<p align="center"> <img src="https://miro.medium.com/max/1330/0*HkBTIFOl_pfD8i9z.jpg" width="100%"/> </p> <p>The <code class="language-plaintext highlighter-rouge">exec</code> family of the system calls is used to run a command or a code file in a new process. In <code class="language-plaintext highlighter-rouge">Linux</code>, this new process is created by replacing the process that made the <code class="language-plaintext highlighter-rouge">exec</code> call, but in <code class="language-plaintext highlighter-rouge">Windows</code>, things are a bit different. In this blog, we will be covering the <code class="language-plaintext highlighter-rouge">execvp</code> system call in Python. We will also be solving an interesting problem using the stuff learned throughout this blog!</p> <h2 id="problem-statement-and-the-motivation">Problem statement and the motivation</h2> <p>I was recently assigned an assignment for Operating Systems, which had an interesting question dealing with the <code class="language-plaintext highlighter-rouge">execvp</code> system call. Now, there are some implementations for this question available on the internet, but all of them are written in <code class="language-plaintext highlighter-rouge">C</code>. In pursuing a pythonic implementation, I went on a journey of exploration, and I will use it here as motivation! We will be applying the theoretical knowledge of <code class="language-plaintext highlighter-rouge">execvp</code> to solve this particular question at the end of this blog! The question -</p> <blockquote> <p>Write a collection of programs p1, p2 and p3 such that they execute sequentially with the same PID and each program should also print its PID. The user should be able to invoke any combination of these programs to achieve the required functionality. For example - Consider three programs twice, half and square which accept only one integer as argument and does some specific operation. These operations may be like -</p> <p>$ twice 10 prints 20 and some number which is its PID</p> <p>$ half 10 prints 5 and some number which is its PID</p> <p>$ square 10 prints 100 and some number which is its PID</p> <p>Now the user should be able to combine these programs in any combination to achieve the desired result.</p> <p>For example -</p> <p>$ twice square half twice half 10</p> <p>should calculate half(twice(half(square(twice(10))))) and print 200 as result. It should also print the process ids of each program as it executes. Note that the process-id printed by each of these programs should be the same, in this case.</p> <p>$ square twice 2</p> <p>should calculate twice(square(2)) and print 8 as result, and the process id of square and twice, which should be the same. The evaluation order is from left to right</p> <p>Note that the last argument is integer, and the remaining arguments are the programs to be invoked.</p> <p>This should be generally applicable to any n number of processes, all of which are written by you.</p> </blockquote> <h2 id="documentation">Documentation</h2> <p>Let us start by going through the documentation of execvp -</p> <blockquote> <p>os.execvp(file, args)</p> <p>These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as OSError exceptions.</p> </blockquote> <p>Key takeaways -</p> <ol> <li>All the <code class="language-plaintext highlighter-rouge">exec</code> calls are implemented in the <code class="language-plaintext highlighter-rouge">os</code> library.</li> <li><code class="language-plaintext highlighter-rouge">os.execvp</code> takes in 2 arguments, file and args.</li> <li>The new process is not a child process but rather the new process substitutes the current process.</li> <li>No return value.</li> <li>On <code class="language-plaintext highlighter-rouge">UNIX</code> systems, the process ID (<code class="language-plaintext highlighter-rouge">PID</code>) remains the same as the caller.</li> <li>Saving you some time, I discovered that the file is supposed to be an executable file and the args are supposed to have the executable file name too. We will look into this in more detail below!</li> </ol> <h2 id="a-minimal-example">A minimal example</h2> <p>Now that we know some stuff about <code class="language-plaintext highlighter-rouge">execvp</code>, let us try using it in our code. The tradition is to start with a “Hello world” program, and we cannot go against the tradition. Further, we will be needing 2 Python files, a caller, and a file that prints “Hello world” -</p> <h3 id="callerpy">caller.py</h3> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>

 <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">python</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">hello.py</span><span class="sh">"</span><span class="p">]</span>
 <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">command</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">command</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <h3 id="hellopy">hello.py</h3> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello world</span><span class="sh">"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Notice how <code class="language-plaintext highlighter-rouge">execvp</code> in <code class="language-plaintext highlighter-rouge">caller.py</code> takes in the name of an executable file (python) as the first argument and the complete command (including the executable file’s name) as the second argument. Running <code class="language-plaintext highlighter-rouge">caller.py</code> gives us “Hello world”, everything as expected!</p> <h2 id="internals-of-execvp-and-playing-with-process-ids">Internals of execvp and playing with process IDs</h2> <p>According to the documentation, <code class="language-plaintext highlighter-rouge">execvp</code> should replace the caller process with the new process instead of creating a subprocess in <code class="language-plaintext highlighter-rouge">UNIX</code> systems. This means that the process ID should not change when the system call is made. Let us try this out, but first, let us create 3 different files for 3 different functions — <code class="language-plaintext highlighter-rouge">square</code>, <code class="language-plaintext highlighter-rouge">half</code>, and <code class="language-plaintext highlighter-rouge">double</code> —</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>


 <span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">SQUARE PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">num</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">num</span> <span class="o">**</span> <span class="mi">2</span>


 <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
     <span class="nf">square</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>


 <span class="k">def</span> <span class="nf">half</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">HALF PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">2</span>


 <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
     <span class="nf">half</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>


 <span class="k">def</span> <span class="nf">double</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">DOUBLE PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span>


 <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
     <span class="nf">double</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>The only new thing in these files is <code class="language-plaintext highlighter-rouge">os.getpid()</code>, which would return the process ID of the process running these files. Let us also modify our caller to execute one of these files —</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>
 <span class="kn">import</span> <span class="n">sys</span>


 <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">CALLER PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">())</span>
 <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">double.py</span><span class="sh">"</span><span class="p">]</span>
 <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">command</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">command</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>We now check the process ID in our caller too. Additionally, to avoid making a mistake in the executable file’s name, we will be using <code class="language-plaintext highlighter-rouge">sys.executable</code> now! Executing <code class="language-plaintext highlighter-rouge">caller.py</code> in <code class="language-plaintext highlighter-rouge">Windows</code> gives us the following output -</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">CALLER PID: 3156
DOUBLE PID: 20940 | RESULT: 20</span></code></pre></figure> <p>The results are definitely weird as the process IDs are not the same. Let us try the same code in <code class="language-plaintext highlighter-rouge">WSL</code> (Windows Subsystem for Linux) -</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">CALLER PID: 34
DOUBLE PID: 34 | RESULT: 20</span></code></pre></figure> <p>The results match with the documentation! As the process IDs are the same, the caller process must’ve been replaced with a new process through the <code class="language-plaintext highlighter-rouge">execvp</code> system call. Note that we did not have to change the executable file’s name from <code class="language-plaintext highlighter-rouge">python</code> to <code class="language-plaintext highlighter-rouge">python3</code> as <code class="language-plaintext highlighter-rouge">sys.executable</code> automatically picked it up!</p> <p>Thus, <code class="language-plaintext highlighter-rouge">os.execvp</code> behaves differently on <code class="language-plaintext highlighter-rouge">Windows</code> and on <code class="language-plaintext highlighter-rouge">UNIX</code> systems. On <code class="language-plaintext highlighter-rouge">Windows</code>, it spawns or creates a new process (a child or a subprocess) whereas, on a <code class="language-plaintext highlighter-rouge">UNIX</code> system, it replaces the original process with a new process!</p> <h2 id="developing-a-cli">Developing a CLI</h2> <p>Now that we know how to use execvp in Python let us move on to our original question! Let us create a file to control everything through the command line —</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>
 <span class="kn">import</span> <span class="n">sys</span>
 <span class="kn">import</span> <span class="n">argparse</span>
 <span class="kn">import</span> <span class="n">subprocess</span>
 <span class="kn">from</span> <span class="n">half</span> <span class="kn">import</span> <span class="n">half</span>
 <span class="kn">from</span> <span class="n">double</span> <span class="kn">import</span> <span class="n">double</span>
 <span class="kn">from</span> <span class="n">square</span> <span class="kn">import</span> <span class="n">square</span>


 <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
     <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
     <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span>
         <span class="sh">"</span><span class="s">-l</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">--list</span><span class="sh">"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">&lt;Required&gt; Set flag</span><span class="sh">"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span>
     <span class="p">)</span>
     <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

     <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">CLI PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">())</span>
     <span class="nf">print</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">)</span>
     <span class="nf">print</span><span class="p">()</span>

     <span class="n">init_val</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
     <span class="n">args</span><span class="p">.</span><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="nb">file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.py</span><span class="sh">"</span> <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
     <span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">init_val</span><span class="p">)</span>

     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
         <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">half.py</span><span class="sh">"</span><span class="p">:</span>
             <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span>
             <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmd</span><span class="p">)</span>
         <span class="k">elif</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">double.py</span><span class="sh">"</span><span class="p">:</span>
             <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span>
             <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmd</span><span class="p">)</span>
         <span class="k">elif</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">square.py</span><span class="sh">"</span><span class="p">:</span>
             <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">args</span><span class="p">.</span><span class="nb">list</span>
             <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmd</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>This file, when executed, accepts a list of CLI arguments which are the function names and a number. The last CLI arg must be a number that has to be processed through various operations. A usage example for this file would be —</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">python cli.py -l twice square half twice half 10</span></code></pre></figure> <p>which should internally translate to —</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">half(twice(half(square(twice(10)))))</span></code></pre></figure> <p>and should print all the results and relevant process IDs.</p> <p>Remember, <code class="language-plaintext highlighter-rouge">os.execvp</code> does not return anything. Hence, once a new python file is called for execution, the flow of control won’t come back to our CLI file. To tackle this we must add additional code in our operation functions which would call the next file without returning back to cli.py.</p> <h2 id="modifying-the-operation-files">Modifying the operation files</h2> <p>The code in every operation file should be modified by adding —</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre> <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>

     <span class="n">n</span> <span class="o">=</span> <span class="nf">operation</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
     <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

     <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">"</span><span class="s">double.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">half.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">square.py</span><span class="sh">"</span><span class="p">]:</span>
         <span class="nf">print</span><span class="p">()</span>
         <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">FINAL PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| FINAL RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
         <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

     <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
     <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmd</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>where operation is either <code class="language-plaintext highlighter-rouge">double</code>, <code class="language-plaintext highlighter-rouge">half</code>, or <code class="language-plaintext highlighter-rouge">square</code>.</p> <p>The code takes in the last CLI argument using <code class="language-plaintext highlighter-rouge">sys.argv[-1]</code> and passes it into the relevant operation function. This last argument is then replaced with the obtained result, and all the CLI args except the first one are passed into <code class="language-plaintext highlighter-rouge">os.execvp</code>, which calls the next operation file!</p> <p>In between, we also need to add a condition to exit if we have reached the last argument, which is a number. This last argument would be the final result as we would have processed all the arguments (function names) before that!</p> <p>Let us modify every operation file —</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>
 <span class="kn">import</span> <span class="n">sys</span>


 <span class="k">def</span> <span class="nf">double</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">DOUBLE PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span>


 <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>

     <span class="n">n</span> <span class="o">=</span> <span class="nf">double</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
     <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

     <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">"</span><span class="s">double.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">half.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">square.py</span><span class="sh">"</span><span class="p">]:</span>
         <span class="nf">print</span><span class="p">()</span>
         <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">FINAL PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| FINAL RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
         <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

     <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
     <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmd</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>
 <span class="kn">import</span> <span class="n">sys</span>


 <span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">SQUARE PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">num</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">num</span> <span class="o">**</span> <span class="mi">2</span>


 <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>

     <span class="n">n</span> <span class="o">=</span> <span class="nf">square</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
     <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

     <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">"</span><span class="s">double.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">half.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">square.py</span><span class="sh">"</span><span class="p">]:</span>
         <span class="nf">print</span><span class="p">()</span>
         <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">FINAL PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| FINAL RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
         <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

     <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
     <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmd</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre> <span class="kn">import</span> <span class="n">os</span>
 <span class="kn">import</span> <span class="n">sys</span>


 <span class="k">def</span> <span class="nf">half</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">HALF PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">2</span>


 <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>

     <span class="n">n</span> <span class="o">=</span> <span class="nf">half</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
     <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

     <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">"</span><span class="s">double.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">half.py</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">square.py</span><span class="sh">"</span><span class="p">]:</span>
         <span class="nf">print</span><span class="p">()</span>
         <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">FINAL PID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="sh">"</span><span class="s">| FINAL RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
         <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

     <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
     <span class="sb">`os.execvp`</span><span class="p">(</span><span class="n">cmd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmd</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>These files will now call each other repeatedly and the whole system would work without returning to a previous file!</p> <h2 id="final-results">Final results</h2> <p>Running the following —</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">python cli.py -l double square half double half 10</span></code></pre></figure> <p>on Windows results in —</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">CLI PID: 7376
['double', 'square', 'half', 'double', 'half', '10']
DOUBLE PID: 32496 | RESULT: 20.0
SQUARE PID: 15144 | RESULT: 400.0
HALF PID: 4860 | RESULT: 200.0
DOUBLE PID: 24928 | RESULT: 400.0
HALF PID: 27868 | RESULT: 200.0
FINAL PID: 27868 | FINAL RESULT: 200.0</span></code></pre></figure> <p>IT WORKS! The program gives us the desired output! Notice how the PIDs are not the same, something that was discussed in great detail above.</p> <p>Running the following —</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">python3 cli.py -l double square half double half 10</span></code></pre></figure> <p>on Windows Subsystem for Linux results in —</p> <figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">CLI PID: 33
['double', 'square', 'half', 'double', 'half', '10']
DOUBLE PID: 33 | RESULT: 20.0
SQUARE PID: 33 | RESULT: 400.0
HALF PID: 33 | RESULT: 200.0
DOUBLE PID: 33 | RESULT: 400.0
HALF PID: 33 | RESULT: 200.0
FINAL PID: 33 | FINAL RESULT: 200.0</span></code></pre></figure> <p>THIS WORKS TOO! The program gives us the desired output again! This time the <code class="language-plaintext highlighter-rouge">PIDs</code> stay the same as no subprocesses were created!</p> <h2 id="summary">Summary</h2> <p>In the above blog, we understood how to use a system call belonging to the <code class="language-plaintext highlighter-rouge">exec</code> family of system calls. We further saw how the behavior of <code class="language-plaintext highlighter-rouge">execvp</code> differs in <code class="language-plaintext highlighter-rouge">Windows</code> and <code class="language-plaintext highlighter-rouge">UNIX</code> systems. In the end, we solved a question that had no Pythonic solution on the internet! :)</p> <hr/> <div class="caption"> (Same post, but on <a href="https://blog.devgenius.io/execvp-system-call-in-python-everything-you-need-to-know-c402fe6886eb">medium</a> (I am migrating my blogs from medium to my website)) </div>]]></content><author><name></name></author><category term="tutorial"/><category term="python"/><category term="operating-systems"/><summary type="html"><![CDATA[Stand back. We are trying system calls in Python.]]></summary></entry><entry><title type="html">Ingesting Reddit memes into Elasticsearch using node.js - Locally and on Google Cloud</title><link href="https://saransh-cpp.github.io/blog/2022/elk-node/" rel="alternate" type="text/html" title="Ingesting Reddit memes into Elasticsearch using node.js - Locally and on Google Cloud"/><published>2022-01-17T00:00:00-05:00</published><updated>2022-01-17T00:00:00-05:00</updated><id>https://saransh-cpp.github.io/blog/2022/elk-node</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2022/elk-node/"><![CDATA[]]></content><author><name></name></author><category term="tutorial"/><category term="nodejs"/><category term="elasticsearch"/><category term="google-cloud"/><category term="cicd"/><summary type="html"><![CDATA[NodeJS, ELK stack, and Google Cloud!]]></summary></entry><entry><title type="html">Covering unit-tests running in sub-processes/threads on GitHub Actions using coverage.py</title><link href="https://saransh-cpp.github.io/blog/2021/cov-test/" rel="alternate" type="text/html" title="Covering unit-tests running in sub-processes/threads on GitHub Actions using coverage.py"/><published>2021-12-29T00:00:00-05:00</published><updated>2021-12-29T00:00:00-05:00</updated><id>https://saransh-cpp.github.io/blog/2021/cov-test</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2021/cov-test/"><![CDATA[]]></content><author><name></name></author><category term="tutorial"/><category term="python"/><category term="testing"/><category term="cicd"/><summary type="html"><![CDATA[A neat trick ;)]]></summary></entry><entry><title type="html">Implementing logistic regression as a neural network from scratch</title><link href="https://saransh-cpp.github.io/blog/2021/lin-reg-python/" rel="alternate" type="text/html" title="Implementing logistic regression as a neural network from scratch"/><published>2021-10-17T00:00:00-04:00</published><updated>2021-10-17T00:00:00-04:00</updated><id>https://saransh-cpp.github.io/blog/2021/lin-reg-python</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2021/lin-reg-python/"><![CDATA[]]></content><author><name></name></author><category term="tutorial"/><category term="python"/><category term="machine-learning"/><summary type="html"><![CDATA[A single neuron neural network from scratch!]]></summary></entry><entry><title type="html">Final Report for Google Summer of Code 2021</title><link href="https://saransh-cpp.github.io/blog/2021/gsoc-final/" rel="alternate" type="text/html" title="Final Report for Google Summer of Code 2021"/><published>2021-08-21T00:00:00-04:00</published><updated>2021-08-21T00:00:00-04:00</updated><id>https://saransh-cpp.github.io/blog/2021/gsoc-final</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2021/gsoc-final/"><![CDATA[]]></content><author><name></name></author><category term="experience"/><category term="pybamm"/><category term="python"/><category term="gsoc"/><category term="numfocus"/><summary type="html"><![CDATA[Google Summer of Code with PyBaMM, NumFOCUS!]]></summary></entry><entry><title type="html">GSoC’21 — Week 7 and 8 — Setting up the reply functionality</title><link href="https://saransh-cpp.github.io/blog/2021/gsoc-w34/" rel="alternate" type="text/html" title="GSoC’21 — Week 7 and 8 — Setting up the reply functionality"/><published>2021-08-05T00:00:00-04:00</published><updated>2021-08-05T00:00:00-04:00</updated><id>https://saransh-cpp.github.io/blog/2021/gsoc-w34</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2021/gsoc-w34/"><![CDATA[<p>Well, I know I am late, but the last 2 weeks were super hectic because of my University examinations. The examination board suddenly decided to give out grades on the basis of internal examinations and I was burdened with projects, presentations, assignments, and vivas. I did manage to set up a base for the replying functionality. Here are some of the major things I added to the bot -</p> <h2 id="refactored-random-parts-of-the-codebase">Refactored random parts of the codebase</h2> <p align="center"> <img src="https://miro.medium.com/max/1000/1*PW-xO0GzpErTwPT7DqUEag.jpeg" width="90%"/> </p> <p>The codebase was very messy in the parts where random configurations were being generated for the bot and refactoring it solved 2 issues together. One, the code quality improved by a lot, and two, now that the randomness was separated from the functions that created simulations, it became very easy to pass down configurations into these functions which in turn paved the way for integrating the Reply functionality into the existing codebase. The comparison_generator function was also converted to a class named ComparisonGenerator to split up the comparisons into 2 parts — “model comparison” (comparing 2 or more models with an experiment or with a constant discharge) and “parameter comparison” (comparing a single model but varying a specific parameter).</p> <h2 id="infinite-reply-issue">Infinite reply issue</h2> <p align="center"> <img src="https://miro.medium.com/max/1200/0*s8qf5fQU-hhPoby9.jpg" width="50%"/> </p> <p>The recent Heroku deployment was working well but the bot was replying to the tweets every time the scheduled workflows ran. The replying feature worked on the following logic —</p> <ol> <li>Read all the tweets in which the bot is mentioned ID &gt; stored ID.</li> <li>Store the tweet’s ID in a text file.</li> <li>Iterate over these tweets and reply.</li> <li>Repeat 1–3</li> </ol> <p>This creates a chicken-egg problem for the bot with the tweet IDs, hence the first tweet ID was manually stored in the text file. All of this was happening on Heroku , i.e. the text file on GitHub was not updated with every new mention.</p> <p>Now coming to the bug, we had enabled automatic deployment on Heroku which meant that every time theCI passed on the main branch (which happened on every scheduled run), the bot was continuously deployed on Heroku where it was built again with the outdated text file (that had the tweet ID) and the bot started reading and replying to tweets from that old ID.</p> <p>To tackle this, a new function was added to sync the tweet IDs stored in GitHuband in Heroku.</p> <p>The CI is failing currently due to some issues, but again, it is very hard to test it on a PR as most of it won’t even run on a PR. It will be fixed probably by tomorrow and the first simulation request will be out by this weekend!</p> <hr/> <div class="caption"> (Same post, but on <a href="https://whiteviolin.medium.com/gsoc21-week-7-and-8-setting-up-the-reply-functionality-be5ac6897a9d">medium</a> (I am migrating my blogs from medium to my website)) </div>]]></content><author><name></name></author><category term="experience"/><category term="pybamm"/><category term="python"/><category term="gsoc"/><category term="numfocus"/><summary type="html"><![CDATA[Google Summer of Code with PyBaMM, NumFOCUS!]]></summary></entry><entry><title type="html">GSoC’21 — Week 5 and 6 — BattBot is live!</title><link href="https://saransh-cpp.github.io/blog/2021/gsoc-w78/" rel="alternate" type="text/html" title="GSoC’21 — Week 5 and 6 — BattBot is live!"/><published>2021-07-19T00:00:00-04:00</published><updated>2021-07-19T00:00:00-04:00</updated><id>https://saransh-cpp.github.io/blog/2021/gsoc-w78</id><content type="html" xml:base="https://saransh-cpp.github.io/blog/2021/gsoc-w78/"><![CDATA[<p>With half of the coding period coming to an end, the bot is finally live! You can find it, tweeting Battery Simulations twice a day, here — <a href="https://twitter.com/battbot_">BattBot</a>. Once the <a href="https://github.com/pybamm-team/BattBot">repository</a> was moved to <a href="https://github.com/pybamm-team/BattBot">pybamm-team’s</a> account, and once the bot went live, a lot of things broke, and a lot of bugs surfaced up. Fixing these broken things was the main agenda for the last two weeks. Apart from the fixes, I also did make some substantial improvements in the bot in terms of reliability and user experience.</p> <h2 id="starting-the-week-with-degradation-comparisons">Starting the week with degradation comparisons</h2> <p>As I mentioned in my last and my last to last blog post, I wanted to implement the degradation comparisons in the 5th week which I did manage to, but the resultant plots were still coming out a bit weird. For instance, “Capacity [A.h]” was going up in some of the GIFs (with Marquis2019 parameter sets) instead of going down, and this was something that was not ideal.</p> <p align="center"> <img src="https://miro.medium.com/max/1400/1*nnsDT8caZkm6sEo4H9R5_A.png" width="100%"/> </p> <div class="caption"> “Capacity [A.h]” going up with Marquis2019 parameter sets </div> <p>Interestingly, while simulating one random experiment, the degradation mechanisms started behaving even more weirdly. It seemed like the model had degradation for a cycle and then didn’t have one for the subsequent cycle.</p> <p align="center"> <img src="https://miro.medium.com/max/1400/1*I_1qpeMLY7Tpy6-aAl75NQ.png" width="100%"/> </p> <div class="caption"> Plotting Single Particle Model with Chen2020 parameters and reaction limited SEI, for the experiment: [(‘Discharge at 3 C until 3.3 V’, ‘Charge at 3 C until 3.8 V’, ‘Hold at 3.8 V until 63 mA’)] </div> <p>We decided to pause with the degradation mechanisms branch to make sure that the bot doesn’t tweet out wrong or misguiding tweets. The branch is almost complete, and it will be merged whenever the plots start coming out without such errors (whenever the degradation mechanisms are fixed in PyBaMM).</p> <h2 id="battbot-is-born">BattBot is born</h2> <p align="center"> <img src="https://miro.medium.com/max/414/1*V5aJ2JTg4I6WyO_rFfw8yg.jpeg" width="20%"/> </p> <p>A lot of new accounts were created in the last two weeks, a new Gmail account for the bot, a new Twitter account for all the tweets, a new Twitter Developer Account, and finally, a new Heroku account to deploy the replying functionality. The repository was also transferred to pybamm-team’s account where all the existing API keys were replaced with the bot’s API keys. A lot of issues started coming up after the bot started tweeting out, which were somehow related to moving the repository. These issues were fixed immediately but, the CI started failing and kept on failing for almost a week which I will be discussing in the next section.</p> <h2 id="the-failing-ci">The failing CI</h2> <p align="center"> <img src="https://miro.medium.com/max/998/1*JCqjAMPwnH5rJ1FuxA6vog.png" width="30%"/> </p> <p>At the end of the third week, we decided to give the bot a good and dynamic description, to go with the plots that were being tweeted, and also added all the sensitive parameters which will be varied in the comparison plots. After this, the bot was almost ready for the first deployment and the new plots+description tweets started getting better attention than the only plot tweets.</p> <h2 id="storing-the-random-configurations-and-letting-anyone-play-with-it">Storing the random configurations and letting anyone play with it</h2> <p align="center"> <img src="https://miro.medium.com/max/1250/1*dEzJkVMAkJHXzOh6G2uEKQ.png" width="50%"/> </p> <p>The CI initially started failing because of a missing <strong>init</strong>.py file in the PyBaMM repository which was fixed in a couple of days. But after that, the CI unexpectedly started failing again and the two major reasons for this were my repository access rights and 2 misplaced lines in the YAML file. Both of them were fixed and a PERSONAL_GITHUB_TOKEN was added to push directly to the protected branch but the tests were still failing. The main reason for this was the inaccessibility of repository secrets to a forked repository, as now I was making PRs from a fork. We never wanted to pass the repository secrets to a fork as they could then be exploited by writing a malicious script and creating a PR. Hence, to tackle this, we decided to run only the tests that don’t need Twitter API keys on PRs from a fork, and to achieve this, the tests directory was bifurcated into two sub-directories which were with_keys and without_keys . After this, the YAML file was again updated to account for these changes and finally, the tests started passing, after failing for almost a week.</p> <p>A lot of other small changes were also made. Listing some of them here -</p> <ul> <li><a href="https://github.com/pybamm-team/BattBot/pull/34">Randomising Tweet time to some extent and changing the frequency</a></li> <li><a href="https://github.com/pybamm-team/BattBot/pull/38">Fixing parameter_value_generator to include functional parameters too</a></li> <li><a href="https://github.com/pybamm-team/BattBot/pull/44">Fixing a bug in the tweet text</a></li> <li><a href="https://github.com/pybamm-team/BattBot/pull/40">Varying “Ambient temperature [K]” and “Current function [A]” while tweeting out constant discharge plots</a></li> <li>And finally, <a href="https://github.com/pybamm-team/BattBot/pull/41">adding a base for the replying functionality</a></li> </ul> <hr/> <div class="caption"> (Same post, but on <a href="https://whiteviolin.medium.com/gsoc21-week-5-and-6-battbot-is-live-91831dd2e5a4">medium</a> (I am migrating my blogs from medium to my website)) </div>]]></content><author><name></name></author><category term="experience"/><category term="pybamm"/><category term="python"/><category term="gsoc"/><category term="numfocus"/><summary type="html"><![CDATA[Google Summer of Code with PyBaMM, NumFOCUS!]]></summary></entry></feed>